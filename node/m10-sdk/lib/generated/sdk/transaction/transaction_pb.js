// source: sdk/transaction/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var sdk_document_pb = require('../../sdk/document_pb.js');
goog.object.extend(proto, sdk_document_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.m10.sdk.transaction.Action', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.Actions', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.CommitTransfer', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.CommitTransfer.TransferState', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.CreateLedgerAccount', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.CreateLedgerTransfer', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.CreateLedgerTransfers', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.CreateTransfer', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.FinalizedTransfer', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.FinalizedTransfer.TransferState', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.FinalizedTransfers', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.GetAccountRequest', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.GetActionRequest', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.GetTransferRequest', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.IndexedAccount', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.IndexedAccount.Issuance', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.Instrument', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.InvokeAction', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.ListActionsRequest', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.ListActionsRequest.FilterCase', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.ListTransferRequest', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.ListTransferRequest.FilterCase', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.SetFreezeState', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.SetInstrument', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.Target', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.Target.TargetCase', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.TransactionData', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.TransactionData.DataCase', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.TransactionError', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.TransactionError.Code', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.TransactionRequestPayload', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.TransactionResponse', null, global);
goog.exportSymbol('proto.m10.sdk.transaction.TransferStep', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.TransactionRequestPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.TransactionRequestPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.TransactionRequestPayload.displayName = 'proto.m10.sdk.transaction.TransactionRequestPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.TransactionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.m10.sdk.transaction.TransactionData.oneofGroups_);
};
goog.inherits(proto.m10.sdk.transaction.TransactionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.TransactionData.displayName = 'proto.m10.sdk.transaction.TransactionData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.TransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.TransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.TransactionResponse.displayName = 'proto.m10.sdk.transaction.TransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.TransactionError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.TransactionError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.TransactionError.displayName = 'proto.m10.sdk.transaction.TransactionError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.CreateLedgerTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.CreateLedgerTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.CreateLedgerTransfer.displayName = 'proto.m10.sdk.transaction.CreateLedgerTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.CreateLedgerTransfers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m10.sdk.transaction.CreateLedgerTransfers.repeatedFields_, null);
};
goog.inherits(proto.m10.sdk.transaction.CreateLedgerTransfers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.CreateLedgerTransfers.displayName = 'proto.m10.sdk.transaction.CreateLedgerTransfers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.GetTransferRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.GetTransferRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.GetTransferRequest.displayName = 'proto.m10.sdk.transaction.GetTransferRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.ListTransferRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.m10.sdk.transaction.ListTransferRequest.oneofGroups_);
};
goog.inherits(proto.m10.sdk.transaction.ListTransferRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.ListTransferRequest.displayName = 'proto.m10.sdk.transaction.ListTransferRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.CreateTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m10.sdk.transaction.CreateTransfer.repeatedFields_, null);
};
goog.inherits(proto.m10.sdk.transaction.CreateTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.CreateTransfer.displayName = 'proto.m10.sdk.transaction.CreateTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.TransferStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m10.sdk.transaction.TransferStep.repeatedFields_, null);
};
goog.inherits(proto.m10.sdk.transaction.TransferStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.TransferStep.displayName = 'proto.m10.sdk.transaction.TransferStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.FinalizedTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m10.sdk.transaction.FinalizedTransfer.repeatedFields_, null);
};
goog.inherits(proto.m10.sdk.transaction.FinalizedTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.FinalizedTransfer.displayName = 'proto.m10.sdk.transaction.FinalizedTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.FinalizedTransfers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m10.sdk.transaction.FinalizedTransfers.repeatedFields_, null);
};
goog.inherits(proto.m10.sdk.transaction.FinalizedTransfers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.FinalizedTransfers.displayName = 'proto.m10.sdk.transaction.FinalizedTransfers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.Instrument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.Instrument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.Instrument.displayName = 'proto.m10.sdk.transaction.Instrument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.CreateLedgerAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.CreateLedgerAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.CreateLedgerAccount.displayName = 'proto.m10.sdk.transaction.CreateLedgerAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.SetFreezeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.SetFreezeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.SetFreezeState.displayName = 'proto.m10.sdk.transaction.SetFreezeState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.SetInstrument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.SetInstrument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.SetInstrument.displayName = 'proto.m10.sdk.transaction.SetInstrument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.GetAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.GetAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.GetAccountRequest.displayName = 'proto.m10.sdk.transaction.GetAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.IndexedAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.IndexedAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.IndexedAccount.displayName = 'proto.m10.sdk.transaction.IndexedAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.IndexedAccount.Issuance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.IndexedAccount.Issuance.displayName = 'proto.m10.sdk.transaction.IndexedAccount.Issuance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.InvokeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.InvokeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.InvokeAction.displayName = 'proto.m10.sdk.transaction.InvokeAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.m10.sdk.transaction.Target.oneofGroups_);
};
goog.inherits(proto.m10.sdk.transaction.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.Target.displayName = 'proto.m10.sdk.transaction.Target';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.Action.displayName = 'proto.m10.sdk.transaction.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.Actions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m10.sdk.transaction.Actions.repeatedFields_, null);
};
goog.inherits(proto.m10.sdk.transaction.Actions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.Actions.displayName = 'proto.m10.sdk.transaction.Actions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.GetActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.GetActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.GetActionRequest.displayName = 'proto.m10.sdk.transaction.GetActionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.ListActionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.m10.sdk.transaction.ListActionsRequest.oneofGroups_);
};
goog.inherits(proto.m10.sdk.transaction.ListActionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.ListActionsRequest.displayName = 'proto.m10.sdk.transaction.ListActionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m10.sdk.transaction.CommitTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m10.sdk.transaction.CommitTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m10.sdk.transaction.CommitTransfer.displayName = 'proto.m10.sdk.transaction.CommitTransfer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.TransactionRequestPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.TransactionRequestPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionRequestPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contextId: msg.getContextId_asB64(),
    data: (f = msg.getData()) && proto.m10.sdk.transaction.TransactionData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.TransactionRequestPayload}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.TransactionRequestPayload;
  return proto.m10.sdk.transaction.TransactionRequestPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.TransactionRequestPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.TransactionRequestPayload}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContextId(value);
      break;
    case 6:
      var value = new proto.m10.sdk.transaction.TransactionData;
      reader.readMessage(value,proto.m10.sdk.transaction.TransactionData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.TransactionRequestPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.TransactionRequestPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionRequestPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getContextId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.m10.sdk.transaction.TransactionData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.TransactionRequestPayload} returns this
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.TransactionRequestPayload} returns this
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes context_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.getContextId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes context_id = 5;
 * This is a type-conversion wrapper around `getContextId()`
 * @return {string}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.getContextId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContextId()));
};


/**
 * optional bytes context_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContextId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.getContextId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContextId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.TransactionRequestPayload} returns this
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.setContextId = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional TransactionData data = 6;
 * @return {?proto.m10.sdk.transaction.TransactionData}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.getData = function() {
  return /** @type{?proto.m10.sdk.transaction.TransactionData} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.TransactionData, 6));
};


/**
 * @param {?proto.m10.sdk.transaction.TransactionData|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionRequestPayload} returns this
*/
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionRequestPayload} returns this
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionRequestPayload.prototype.hasData = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.m10.sdk.transaction.TransactionData.oneofGroups_ = [[10,11,12,16,20,21,22,23]];

/**
 * @enum {number}
 */
proto.m10.sdk.transaction.TransactionData.DataCase = {
  DATA_NOT_SET: 0,
  TRANSFER: 10,
  CREATE_LEDGER_ACCOUNT: 11,
  SET_FREEZE_STATE: 12,
  DOCUMENT_OPERATIONS: 16,
  INVOKE_ACTION: 20,
  INITIATE_TRANSFER: 21,
  COMMIT_TRANSFER: 22,
  SET_INSTRUMENT: 23
};

/**
 * @return {proto.m10.sdk.transaction.TransactionData.DataCase}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getDataCase = function() {
  return /** @type {proto.m10.sdk.transaction.TransactionData.DataCase} */(jspb.Message.computeOneofCase(this, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.TransactionData.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.TransactionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.TransactionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    transfer: (f = msg.getTransfer()) && proto.m10.sdk.transaction.CreateTransfer.toObject(includeInstance, f),
    createLedgerAccount: (f = msg.getCreateLedgerAccount()) && proto.m10.sdk.transaction.CreateLedgerAccount.toObject(includeInstance, f),
    setFreezeState: (f = msg.getSetFreezeState()) && proto.m10.sdk.transaction.SetFreezeState.toObject(includeInstance, f),
    documentOperations: (f = msg.getDocumentOperations()) && sdk_document_pb.DocumentOperations.toObject(includeInstance, f),
    invokeAction: (f = msg.getInvokeAction()) && proto.m10.sdk.transaction.InvokeAction.toObject(includeInstance, f),
    initiateTransfer: (f = msg.getInitiateTransfer()) && proto.m10.sdk.transaction.CreateTransfer.toObject(includeInstance, f),
    commitTransfer: (f = msg.getCommitTransfer()) && proto.m10.sdk.transaction.CommitTransfer.toObject(includeInstance, f),
    setInstrument: (f = msg.getSetInstrument()) && proto.m10.sdk.transaction.SetInstrument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.TransactionData}
 */
proto.m10.sdk.transaction.TransactionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.TransactionData;
  return proto.m10.sdk.transaction.TransactionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.TransactionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.TransactionData}
 */
proto.m10.sdk.transaction.TransactionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.m10.sdk.transaction.CreateTransfer;
      reader.readMessage(value,proto.m10.sdk.transaction.CreateTransfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 11:
      var value = new proto.m10.sdk.transaction.CreateLedgerAccount;
      reader.readMessage(value,proto.m10.sdk.transaction.CreateLedgerAccount.deserializeBinaryFromReader);
      msg.setCreateLedgerAccount(value);
      break;
    case 12:
      var value = new proto.m10.sdk.transaction.SetFreezeState;
      reader.readMessage(value,proto.m10.sdk.transaction.SetFreezeState.deserializeBinaryFromReader);
      msg.setSetFreezeState(value);
      break;
    case 16:
      var value = new sdk_document_pb.DocumentOperations;
      reader.readMessage(value,sdk_document_pb.DocumentOperations.deserializeBinaryFromReader);
      msg.setDocumentOperations(value);
      break;
    case 20:
      var value = new proto.m10.sdk.transaction.InvokeAction;
      reader.readMessage(value,proto.m10.sdk.transaction.InvokeAction.deserializeBinaryFromReader);
      msg.setInvokeAction(value);
      break;
    case 21:
      var value = new proto.m10.sdk.transaction.CreateTransfer;
      reader.readMessage(value,proto.m10.sdk.transaction.CreateTransfer.deserializeBinaryFromReader);
      msg.setInitiateTransfer(value);
      break;
    case 22:
      var value = new proto.m10.sdk.transaction.CommitTransfer;
      reader.readMessage(value,proto.m10.sdk.transaction.CommitTransfer.deserializeBinaryFromReader);
      msg.setCommitTransfer(value);
      break;
    case 23:
      var value = new proto.m10.sdk.transaction.SetInstrument;
      reader.readMessage(value,proto.m10.sdk.transaction.SetInstrument.deserializeBinaryFromReader);
      msg.setSetInstrument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransactionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.TransactionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.TransactionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.m10.sdk.transaction.CreateTransfer.serializeBinaryToWriter
    );
  }
  f = message.getCreateLedgerAccount();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.m10.sdk.transaction.CreateLedgerAccount.serializeBinaryToWriter
    );
  }
  f = message.getSetFreezeState();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.m10.sdk.transaction.SetFreezeState.serializeBinaryToWriter
    );
  }
  f = message.getDocumentOperations();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      sdk_document_pb.DocumentOperations.serializeBinaryToWriter
    );
  }
  f = message.getInvokeAction();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.m10.sdk.transaction.InvokeAction.serializeBinaryToWriter
    );
  }
  f = message.getInitiateTransfer();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.m10.sdk.transaction.CreateTransfer.serializeBinaryToWriter
    );
  }
  f = message.getCommitTransfer();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.m10.sdk.transaction.CommitTransfer.serializeBinaryToWriter
    );
  }
  f = message.getSetInstrument();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.m10.sdk.transaction.SetInstrument.serializeBinaryToWriter
    );
  }
};


/**
 * optional CreateTransfer transfer = 10;
 * @return {?proto.m10.sdk.transaction.CreateTransfer}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getTransfer = function() {
  return /** @type{?proto.m10.sdk.transaction.CreateTransfer} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.CreateTransfer, 10));
};


/**
 * @param {?proto.m10.sdk.transaction.CreateTransfer|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CreateLedgerAccount create_ledger_account = 11;
 * @return {?proto.m10.sdk.transaction.CreateLedgerAccount}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getCreateLedgerAccount = function() {
  return /** @type{?proto.m10.sdk.transaction.CreateLedgerAccount} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.CreateLedgerAccount, 11));
};


/**
 * @param {?proto.m10.sdk.transaction.CreateLedgerAccount|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setCreateLedgerAccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearCreateLedgerAccount = function() {
  return this.setCreateLedgerAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasCreateLedgerAccount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SetFreezeState set_freeze_state = 12;
 * @return {?proto.m10.sdk.transaction.SetFreezeState}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getSetFreezeState = function() {
  return /** @type{?proto.m10.sdk.transaction.SetFreezeState} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.SetFreezeState, 12));
};


/**
 * @param {?proto.m10.sdk.transaction.SetFreezeState|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setSetFreezeState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearSetFreezeState = function() {
  return this.setSetFreezeState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasSetFreezeState = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional m10.sdk.DocumentOperations document_operations = 16;
 * @return {?proto.m10.sdk.DocumentOperations}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getDocumentOperations = function() {
  return /** @type{?proto.m10.sdk.DocumentOperations} */ (
    jspb.Message.getWrapperField(this, sdk_document_pb.DocumentOperations, 16));
};


/**
 * @param {?proto.m10.sdk.DocumentOperations|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setDocumentOperations = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearDocumentOperations = function() {
  return this.setDocumentOperations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasDocumentOperations = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional InvokeAction invoke_action = 20;
 * @return {?proto.m10.sdk.transaction.InvokeAction}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getInvokeAction = function() {
  return /** @type{?proto.m10.sdk.transaction.InvokeAction} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.InvokeAction, 20));
};


/**
 * @param {?proto.m10.sdk.transaction.InvokeAction|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setInvokeAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearInvokeAction = function() {
  return this.setInvokeAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasInvokeAction = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional CreateTransfer initiate_transfer = 21;
 * @return {?proto.m10.sdk.transaction.CreateTransfer}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getInitiateTransfer = function() {
  return /** @type{?proto.m10.sdk.transaction.CreateTransfer} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.CreateTransfer, 21));
};


/**
 * @param {?proto.m10.sdk.transaction.CreateTransfer|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setInitiateTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearInitiateTransfer = function() {
  return this.setInitiateTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasInitiateTransfer = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional CommitTransfer commit_transfer = 22;
 * @return {?proto.m10.sdk.transaction.CommitTransfer}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getCommitTransfer = function() {
  return /** @type{?proto.m10.sdk.transaction.CommitTransfer} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.CommitTransfer, 22));
};


/**
 * @param {?proto.m10.sdk.transaction.CommitTransfer|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setCommitTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearCommitTransfer = function() {
  return this.setCommitTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasCommitTransfer = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional SetInstrument set_instrument = 23;
 * @return {?proto.m10.sdk.transaction.SetInstrument}
 */
proto.m10.sdk.transaction.TransactionData.prototype.getSetInstrument = function() {
  return /** @type{?proto.m10.sdk.transaction.SetInstrument} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.SetInstrument, 23));
};


/**
 * @param {?proto.m10.sdk.transaction.SetInstrument|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
*/
proto.m10.sdk.transaction.TransactionData.prototype.setSetInstrument = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.m10.sdk.transaction.TransactionData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionData} returns this
 */
proto.m10.sdk.transaction.TransactionData.prototype.clearSetInstrument = function() {
  return this.setSetInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionData.prototype.hasSetInstrument = function() {
  return jspb.Message.getField(this, 23) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.TransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.TransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && proto.m10.sdk.transaction.TransactionError.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    accountCreated: msg.getAccountCreated_asB64(),
    transferCommitted: (f = msg.getTransferCommitted()) && proto.m10.sdk.transaction.CreateTransfer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.TransactionResponse}
 */
proto.m10.sdk.transaction.TransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.TransactionResponse;
  return proto.m10.sdk.transaction.TransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.TransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.TransactionResponse}
 */
proto.m10.sdk.transaction.TransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxId(value);
      break;
    case 2:
      var value = new proto.m10.sdk.transaction.TransactionError;
      reader.readMessage(value,proto.m10.sdk.transaction.TransactionError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountCreated(value);
      break;
    case 5:
      var value = new proto.m10.sdk.transaction.CreateTransfer;
      reader.readMessage(value,proto.m10.sdk.transaction.CreateTransfer.deserializeBinaryFromReader);
      msg.setTransferCommitted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.TransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.TransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.m10.sdk.transaction.TransactionError.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = message.getAccountCreated_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTransferCommitted();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.m10.sdk.transaction.CreateTransfer.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 tx_id = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.getTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.TransactionResponse} returns this
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.setTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TransactionError error = 2;
 * @return {?proto.m10.sdk.transaction.TransactionError}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.getError = function() {
  return /** @type{?proto.m10.sdk.transaction.TransactionError} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.TransactionError, 2));
};


/**
 * @param {?proto.m10.sdk.transaction.TransactionError|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionResponse} returns this
*/
proto.m10.sdk.transaction.TransactionResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionResponse} returns this
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fixed64 timestamp = 4;
 * @return {number}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.TransactionResponse} returns this
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes account_created = 3;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.getAccountCreated = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes account_created = 3;
 * This is a type-conversion wrapper around `getAccountCreated()`
 * @return {string}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.getAccountCreated_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountCreated()));
};


/**
 * optional bytes account_created = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountCreated()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.getAccountCreated_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountCreated()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.TransactionResponse} returns this
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.setAccountCreated = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional CreateTransfer transfer_committed = 5;
 * @return {?proto.m10.sdk.transaction.CreateTransfer}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.getTransferCommitted = function() {
  return /** @type{?proto.m10.sdk.transaction.CreateTransfer} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.CreateTransfer, 5));
};


/**
 * @param {?proto.m10.sdk.transaction.CreateTransfer|undefined} value
 * @return {!proto.m10.sdk.transaction.TransactionResponse} returns this
*/
proto.m10.sdk.transaction.TransactionResponse.prototype.setTransferCommitted = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.TransactionResponse} returns this
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.clearTransferCommitted = function() {
  return this.setTransferCommitted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.TransactionResponse.prototype.hasTransferCommitted = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.TransactionError.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.TransactionError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.TransactionError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.TransactionError}
 */
proto.m10.sdk.transaction.TransactionError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.TransactionError;
  return proto.m10.sdk.transaction.TransactionError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.TransactionError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.TransactionError}
 */
proto.m10.sdk.transaction.TransactionError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.m10.sdk.transaction.TransactionError.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransactionError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.TransactionError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.TransactionError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransactionError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.m10.sdk.transaction.TransactionError.Code = {
  UNKNOWN: 0,
  UNIMPLEMENTED: 1,
  NOT_FOUND: 2,
  ALREADY_EXISTS: 3,
  UNAUTHORIZED: 4,
  BAD_REQUEST: 5,
  INVALID_REQUEST_TYPE: 6,
  INVALID_ACCOUNT_ID: 7,
  INVALID_TRANSFER: 8,
  MESSAGE_TOO_LARGE: 10,
  INVALID_SIGNATURE: 11,
  VERIFICATION_FAILED: 12,
  REPLAY_PROTECTION: 20,
  INVALID_EXPRESSION: 21,
  INCORRECT_TYPE: 22,
  ACCOUNT_FROZEN: 23,
  UNMODIFIED_STATE: 24,
  INSUFFICIENT_BALANCE: 25,
  BALANCE_OVERFLOW: 26,
  ACCOUNT_DEPTH_EXCEEDED: 27,
  INVALID_TARGET: 30
};

/**
 * optional Code code = 1;
 * @return {!proto.m10.sdk.transaction.TransactionError.Code}
 */
proto.m10.sdk.transaction.TransactionError.prototype.getCode = function() {
  return /** @type {!proto.m10.sdk.transaction.TransactionError.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.m10.sdk.transaction.TransactionError.Code} value
 * @return {!proto.m10.sdk.transaction.TransactionError} returns this
 */
proto.m10.sdk.transaction.TransactionError.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.m10.sdk.transaction.TransactionError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.TransactionError} returns this
 */
proto.m10.sdk.transaction.TransactionError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.CreateLedgerTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.CreateLedgerTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transfer: (f = msg.getTransfer()) && proto.m10.sdk.transaction.CreateTransfer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfer}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.CreateLedgerTransfer;
  return proto.m10.sdk.transaction.CreateLedgerTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.CreateLedgerTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfer}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLedgerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = new proto.m10.sdk.transaction.CreateTransfer;
      reader.readMessage(value,proto.m10.sdk.transaction.CreateTransfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.CreateLedgerTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.CreateLedgerTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.m10.sdk.transaction.CreateTransfer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ledger_id = 1;
 * @return {string}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.getLedgerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfer} returns this
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.setLedgerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfer} returns this
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CreateTransfer transfer = 3;
 * @return {?proto.m10.sdk.transaction.CreateTransfer}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.getTransfer = function() {
  return /** @type{?proto.m10.sdk.transaction.CreateTransfer} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.CreateTransfer, 3));
};


/**
 * @param {?proto.m10.sdk.transaction.CreateTransfer|undefined} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfer} returns this
*/
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.setTransfer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfer} returns this
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.CreateLedgerTransfer.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.CreateLedgerTransfers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.CreateLedgerTransfers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.toObject = function(includeInstance, msg) {
  var f, obj = {
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.m10.sdk.transaction.CreateLedgerTransfer.toObject, includeInstance),
    validUntil: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfers}
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.CreateLedgerTransfers;
  return proto.m10.sdk.transaction.CreateLedgerTransfers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.CreateLedgerTransfers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfers}
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.m10.sdk.transaction.CreateLedgerTransfer;
      reader.readMessage(value,proto.m10.sdk.transaction.CreateLedgerTransfer.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidUntil(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.CreateLedgerTransfers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.CreateLedgerTransfers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.m10.sdk.transaction.CreateLedgerTransfer.serializeBinaryToWriter
    );
  }
  f = message.getValidUntil();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated CreateLedgerTransfer transfers = 1;
 * @return {!Array<!proto.m10.sdk.transaction.CreateLedgerTransfer>}
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.m10.sdk.transaction.CreateLedgerTransfer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.m10.sdk.transaction.CreateLedgerTransfer, 1));
};


/**
 * @param {!Array<!proto.m10.sdk.transaction.CreateLedgerTransfer>} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfers} returns this
*/
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.setTransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m10.sdk.transaction.CreateLedgerTransfer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfer}
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m10.sdk.transaction.CreateLedgerTransfer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfers} returns this
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.clearTransfersList = function() {
  return this.setTransfersList([]);
};


/**
 * optional uint64 valid_until = 2;
 * @return {number}
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.getValidUntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerTransfers} returns this
 */
proto.m10.sdk.transaction.CreateLedgerTransfers.prototype.setValidUntil = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.GetTransferRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.GetTransferRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.GetTransferRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.GetTransferRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.GetTransferRequest}
 */
proto.m10.sdk.transaction.GetTransferRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.GetTransferRequest;
  return proto.m10.sdk.transaction.GetTransferRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.GetTransferRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.GetTransferRequest}
 */
proto.m10.sdk.transaction.GetTransferRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.GetTransferRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.GetTransferRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.GetTransferRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.GetTransferRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 tx_id = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.GetTransferRequest.prototype.getTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.GetTransferRequest} returns this
 */
proto.m10.sdk.transaction.GetTransferRequest.prototype.setTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.m10.sdk.transaction.ListTransferRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.m10.sdk.transaction.ListTransferRequest.FilterCase = {
  FILTER_NOT_SET: 0,
  ACCOUNT_ID: 1,
  CONTEXT_ID: 2
};

/**
 * @return {proto.m10.sdk.transaction.ListTransferRequest.FilterCase}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getFilterCase = function() {
  return /** @type {proto.m10.sdk.transaction.ListTransferRequest.FilterCase} */(jspb.Message.computeOneofCase(this, proto.m10.sdk.transaction.ListTransferRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.ListTransferRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.ListTransferRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.ListTransferRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: msg.getAccountId_asB64(),
    contextId: msg.getContextId_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    includeChildAccounts: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    minTxId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxTxId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.ListTransferRequest}
 */
proto.m10.sdk.transaction.ListTransferRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.ListTransferRequest;
  return proto.m10.sdk.transaction.ListTransferRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.ListTransferRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.ListTransferRequest}
 */
proto.m10.sdk.transaction.ListTransferRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContextId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeChildAccounts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinTxId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.ListTransferRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.ListTransferRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.ListTransferRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getIncludeChildAccounts();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMinTxId();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMaxTxId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional bytes account_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getAccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account_id = 1;
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {string}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getAccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountId()));
};


/**
 * optional bytes account_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getAccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.m10.sdk.transaction.ListTransferRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.clearAccountId = function() {
  return jspb.Message.setOneofField(this, 1, proto.m10.sdk.transaction.ListTransferRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes context_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getContextId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes context_id = 2;
 * This is a type-conversion wrapper around `getContextId()`
 * @return {string}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getContextId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContextId()));
};


/**
 * optional bytes context_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContextId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getContextId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContextId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.setContextId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.m10.sdk.transaction.ListTransferRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.clearContextId = function() {
  return jspb.Message.setOneofField(this, 2, proto.m10.sdk.transaction.ListTransferRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.hasContextId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 limit = 4;
 * @return {number}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool include_child_accounts = 5;
 * @return {boolean}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getIncludeChildAccounts = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.setIncludeChildAccounts = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint64 min_tx_id = 6;
 * @return {number}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getMinTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.setMinTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 max_tx_id = 7;
 * @return {number}
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.getMaxTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.ListTransferRequest} returns this
 */
proto.m10.sdk.transaction.ListTransferRequest.prototype.setMaxTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m10.sdk.transaction.CreateTransfer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.CreateTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.CreateTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.CreateTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferStepsList: jspb.Message.toObjectList(msg.getTransferStepsList(),
    proto.m10.sdk.transaction.TransferStep.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.CreateTransfer}
 */
proto.m10.sdk.transaction.CreateTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.CreateTransfer;
  return proto.m10.sdk.transaction.CreateTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.CreateTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.CreateTransfer}
 */
proto.m10.sdk.transaction.CreateTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.m10.sdk.transaction.TransferStep;
      reader.readMessage(value,proto.m10.sdk.transaction.TransferStep.deserializeBinaryFromReader);
      msg.addTransferSteps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.CreateTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.CreateTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.CreateTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferStepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.m10.sdk.transaction.TransferStep.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransferStep transfer_steps = 1;
 * @return {!Array<!proto.m10.sdk.transaction.TransferStep>}
 */
proto.m10.sdk.transaction.CreateTransfer.prototype.getTransferStepsList = function() {
  return /** @type{!Array<!proto.m10.sdk.transaction.TransferStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.m10.sdk.transaction.TransferStep, 1));
};


/**
 * @param {!Array<!proto.m10.sdk.transaction.TransferStep>} value
 * @return {!proto.m10.sdk.transaction.CreateTransfer} returns this
*/
proto.m10.sdk.transaction.CreateTransfer.prototype.setTransferStepsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m10.sdk.transaction.TransferStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m10.sdk.transaction.TransferStep}
 */
proto.m10.sdk.transaction.CreateTransfer.prototype.addTransferSteps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m10.sdk.transaction.TransferStep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m10.sdk.transaction.CreateTransfer} returns this
 */
proto.m10.sdk.transaction.CreateTransfer.prototype.clearTransferStepsList = function() {
  return this.setTransferStepsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m10.sdk.transaction.TransferStep.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.TransferStep.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.TransferStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.TransferStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransferStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAccountId: msg.getFromAccountId_asB64(),
    toAccountId: msg.getToAccountId_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    metadataList: jspb.Message.toObjectList(msg.getMetadataList(),
    google_protobuf_any_pb.Any.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.TransferStep}
 */
proto.m10.sdk.transaction.TransferStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.TransferStep;
  return proto.m10.sdk.transaction.TransferStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.TransferStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.TransferStep}
 */
proto.m10.sdk.transaction.TransferStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromAccountId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToAccountId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 7:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransferStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.TransferStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.TransferStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.TransferStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromAccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getToAccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes from_account_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getFromAccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes from_account_id = 1;
 * This is a type-conversion wrapper around `getFromAccountId()`
 * @return {string}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getFromAccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromAccountId()));
};


/**
 * optional bytes from_account_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromAccountId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getFromAccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromAccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.TransferStep} returns this
 */
proto.m10.sdk.transaction.TransferStep.prototype.setFromAccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes to_account_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getToAccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes to_account_id = 2;
 * This is a type-conversion wrapper around `getToAccountId()`
 * @return {string}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getToAccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToAccountId()));
};


/**
 * optional bytes to_account_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToAccountId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getToAccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToAccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.TransferStep} returns this
 */
proto.m10.sdk.transaction.TransferStep.prototype.setToAccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 amount = 4;
 * @return {number}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.TransferStep} returns this
 */
proto.m10.sdk.transaction.TransferStep.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated google.protobuf.Any metadata = 7;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.m10.sdk.transaction.TransferStep.prototype.getMetadataList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 7));
};


/**
 * @param {!Array<!proto.google.protobuf.Any>} value
 * @return {!proto.m10.sdk.transaction.TransferStep} returns this
*/
proto.m10.sdk.transaction.TransferStep.prototype.setMetadataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.m10.sdk.transaction.TransferStep.prototype.addMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.google.protobuf.Any, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m10.sdk.transaction.TransferStep} returns this
 */
proto.m10.sdk.transaction.TransferStep.prototype.clearMetadataList = function() {
  return this.setMetadataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m10.sdk.transaction.FinalizedTransfer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.FinalizedTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.FinalizedTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.FinalizedTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contextId: msg.getContextId_asB64(),
    transferStepsList: jspb.Message.toObjectList(msg.getTransferStepsList(),
    proto.m10.sdk.transaction.TransferStep.toObject, includeInstance),
    error: (f = msg.getError()) && proto.m10.sdk.transaction.TransactionError.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer}
 */
proto.m10.sdk.transaction.FinalizedTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.FinalizedTransfer;
  return proto.m10.sdk.transaction.FinalizedTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.FinalizedTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer}
 */
proto.m10.sdk.transaction.FinalizedTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContextId(value);
      break;
    case 3:
      var value = new proto.m10.sdk.transaction.TransferStep;
      reader.readMessage(value,proto.m10.sdk.transaction.TransferStep.deserializeBinaryFromReader);
      msg.addTransferSteps(value);
      break;
    case 4:
      var value = new proto.m10.sdk.transaction.TransactionError;
      reader.readMessage(value,proto.m10.sdk.transaction.TransactionError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {!proto.m10.sdk.transaction.FinalizedTransfer.TransferState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.FinalizedTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.FinalizedTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.FinalizedTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getContextId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTransferStepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.m10.sdk.transaction.TransferStep.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.m10.sdk.transaction.TransactionError.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      5,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.m10.sdk.transaction.FinalizedTransfer.TransferState = {
  ACCEPTED: 0,
  REJECTED: 1,
  PENDING: 2,
  EXPIRED: 3
};

/**
 * optional uint64 tx_id = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.setTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes context_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getContextId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes context_id = 2;
 * This is a type-conversion wrapper around `getContextId()`
 * @return {string}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getContextId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContextId()));
};


/**
 * optional bytes context_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContextId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getContextId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContextId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.setContextId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated TransferStep transfer_steps = 3;
 * @return {!Array<!proto.m10.sdk.transaction.TransferStep>}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getTransferStepsList = function() {
  return /** @type{!Array<!proto.m10.sdk.transaction.TransferStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.m10.sdk.transaction.TransferStep, 3));
};


/**
 * @param {!Array<!proto.m10.sdk.transaction.TransferStep>} value
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
*/
proto.m10.sdk.transaction.FinalizedTransfer.prototype.setTransferStepsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.m10.sdk.transaction.TransferStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m10.sdk.transaction.TransferStep}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.addTransferSteps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.m10.sdk.transaction.TransferStep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.clearTransferStepsList = function() {
  return this.setTransferStepsList([]);
};


/**
 * optional TransactionError error = 4;
 * @return {?proto.m10.sdk.transaction.TransactionError}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getError = function() {
  return /** @type{?proto.m10.sdk.transaction.TransactionError} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.TransactionError, 4));
};


/**
 * @param {?proto.m10.sdk.transaction.TransactionError|undefined} value
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
*/
proto.m10.sdk.transaction.FinalizedTransfer.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional fixed64 timestamp = 5;
 * @return {number}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional TransferState state = 7;
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer.TransferState}
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.getState = function() {
  return /** @type {!proto.m10.sdk.transaction.FinalizedTransfer.TransferState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.m10.sdk.transaction.FinalizedTransfer.TransferState} value
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer} returns this
 */
proto.m10.sdk.transaction.FinalizedTransfer.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m10.sdk.transaction.FinalizedTransfers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.FinalizedTransfers.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.FinalizedTransfers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.FinalizedTransfers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.FinalizedTransfers.toObject = function(includeInstance, msg) {
  var f, obj = {
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.m10.sdk.transaction.FinalizedTransfer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.FinalizedTransfers}
 */
proto.m10.sdk.transaction.FinalizedTransfers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.FinalizedTransfers;
  return proto.m10.sdk.transaction.FinalizedTransfers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.FinalizedTransfers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.FinalizedTransfers}
 */
proto.m10.sdk.transaction.FinalizedTransfers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.m10.sdk.transaction.FinalizedTransfer;
      reader.readMessage(value,proto.m10.sdk.transaction.FinalizedTransfer.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.FinalizedTransfers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.FinalizedTransfers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.FinalizedTransfers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.FinalizedTransfers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.m10.sdk.transaction.FinalizedTransfer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FinalizedTransfer transfers = 1;
 * @return {!Array<!proto.m10.sdk.transaction.FinalizedTransfer>}
 */
proto.m10.sdk.transaction.FinalizedTransfers.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.m10.sdk.transaction.FinalizedTransfer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.m10.sdk.transaction.FinalizedTransfer, 1));
};


/**
 * @param {!Array<!proto.m10.sdk.transaction.FinalizedTransfer>} value
 * @return {!proto.m10.sdk.transaction.FinalizedTransfers} returns this
*/
proto.m10.sdk.transaction.FinalizedTransfers.prototype.setTransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m10.sdk.transaction.FinalizedTransfer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m10.sdk.transaction.FinalizedTransfer}
 */
proto.m10.sdk.transaction.FinalizedTransfers.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m10.sdk.transaction.FinalizedTransfer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m10.sdk.transaction.FinalizedTransfers} returns this
 */
proto.m10.sdk.transaction.FinalizedTransfers.prototype.clearTransfersList = function() {
  return this.setTransfersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.Instrument.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.Instrument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.Instrument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Instrument.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    decimalPlaces: jspb.Message.getFieldWithDefault(msg, 2, 0),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.Instrument}
 */
proto.m10.sdk.transaction.Instrument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.Instrument;
  return proto.m10.sdk.transaction.Instrument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.Instrument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.Instrument}
 */
proto.m10.sdk.transaction.Instrument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimalPlaces(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Instrument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.Instrument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.Instrument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Instrument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDecimalPlaces();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.m10.sdk.transaction.Instrument.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.Instrument} returns this
 */
proto.m10.sdk.transaction.Instrument.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 decimal_places = 2;
 * @return {number}
 */
proto.m10.sdk.transaction.Instrument.prototype.getDecimalPlaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.Instrument} returns this
 */
proto.m10.sdk.transaction.Instrument.prototype.setDecimalPlaces = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.m10.sdk.transaction.Instrument.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.Instrument} returns this
 */
proto.m10.sdk.transaction.Instrument.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.CreateLedgerAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.CreateLedgerAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateLedgerAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentId: msg.getParentId_asB64(),
    issuance: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    frozen: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    instrument: (f = msg.getInstrument()) && proto.m10.sdk.transaction.Instrument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.CreateLedgerAccount}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.CreateLedgerAccount;
  return proto.m10.sdk.transaction.CreateLedgerAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.CreateLedgerAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.CreateLedgerAccount}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuance(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFrozen(value);
      break;
    case 4:
      var value = new proto.m10.sdk.transaction.Instrument;
      reader.readMessage(value,proto.m10.sdk.transaction.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.CreateLedgerAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.CreateLedgerAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CreateLedgerAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIssuance();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getFrozen();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.m10.sdk.transaction.Instrument.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes parent_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.getParentId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes parent_id = 1;
 * This is a type-conversion wrapper around `getParentId()`
 * @return {string}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.getParentId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentId()));
};


/**
 * optional bytes parent_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.getParentId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerAccount} returns this
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.setParentId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool issuance = 2;
 * @return {boolean}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.getIssuance = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerAccount} returns this
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.setIssuance = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool frozen = 3;
 * @return {boolean}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.getFrozen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerAccount} returns this
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.setFrozen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Instrument instrument = 4;
 * @return {?proto.m10.sdk.transaction.Instrument}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.getInstrument = function() {
  return /** @type{?proto.m10.sdk.transaction.Instrument} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.Instrument, 4));
};


/**
 * @param {?proto.m10.sdk.transaction.Instrument|undefined} value
 * @return {!proto.m10.sdk.transaction.CreateLedgerAccount} returns this
*/
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.setInstrument = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.CreateLedgerAccount} returns this
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.clearInstrument = function() {
  return this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.CreateLedgerAccount.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.SetFreezeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.SetFreezeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.SetFreezeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: msg.getAccountId_asB64(),
    frozen: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.SetFreezeState}
 */
proto.m10.sdk.transaction.SetFreezeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.SetFreezeState;
  return proto.m10.sdk.transaction.SetFreezeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.SetFreezeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.SetFreezeState}
 */
proto.m10.sdk.transaction.SetFreezeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFrozen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.SetFreezeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.SetFreezeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.SetFreezeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFrozen();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes account_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.getAccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account_id = 1;
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {string}
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.getAccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountId()));
};


/**
 * optional bytes account_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.getAccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.SetFreezeState} returns this
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool frozen = 2;
 * @return {boolean}
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.getFrozen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.m10.sdk.transaction.SetFreezeState} returns this
 */
proto.m10.sdk.transaction.SetFreezeState.prototype.setFrozen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.SetInstrument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.SetInstrument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.SetInstrument.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: msg.getAccountId_asB64(),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decimalPlaces: jspb.Message.getFieldWithDefault(msg, 3, 0),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.SetInstrument}
 */
proto.m10.sdk.transaction.SetInstrument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.SetInstrument;
  return proto.m10.sdk.transaction.SetInstrument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.SetInstrument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.SetInstrument}
 */
proto.m10.sdk.transaction.SetInstrument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimalPlaces(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.SetInstrument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.SetInstrument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.SetInstrument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecimalPlaces();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes account_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.getAccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account_id = 1;
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {string}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.getAccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountId()));
};


/**
 * optional bytes account_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.getAccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.SetInstrument} returns this
 */
proto.m10.sdk.transaction.SetInstrument.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.SetInstrument} returns this
 */
proto.m10.sdk.transaction.SetInstrument.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 decimal_places = 3;
 * @return {number}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.getDecimalPlaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.SetInstrument} returns this
 */
proto.m10.sdk.transaction.SetInstrument.prototype.setDecimalPlaces = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.m10.sdk.transaction.SetInstrument.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.SetInstrument} returns this
 */
proto.m10.sdk.transaction.SetInstrument.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.GetAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.GetAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.GetAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.GetAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.GetAccountRequest}
 */
proto.m10.sdk.transaction.GetAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.GetAccountRequest;
  return proto.m10.sdk.transaction.GetAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.GetAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.GetAccountRequest}
 */
proto.m10.sdk.transaction.GetAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.GetAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.GetAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.GetAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.GetAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.GetAccountRequest.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.m10.sdk.transaction.GetAccountRequest.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.GetAccountRequest.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.GetAccountRequest} returns this
 */
proto.m10.sdk.transaction.GetAccountRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.IndexedAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.IndexedAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.IndexedAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    issuance: (f = msg.getIssuance()) && proto.m10.sdk.transaction.IndexedAccount.Issuance.toObject(includeInstance, f),
    balance: jspb.Message.getFieldWithDefault(msg, 4, 0),
    frozen: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    instrument: (f = msg.getInstrument()) && proto.m10.sdk.transaction.Instrument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.IndexedAccount}
 */
proto.m10.sdk.transaction.IndexedAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.IndexedAccount;
  return proto.m10.sdk.transaction.IndexedAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.IndexedAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.IndexedAccount}
 */
proto.m10.sdk.transaction.IndexedAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.m10.sdk.transaction.IndexedAccount.Issuance;
      reader.readMessage(value,proto.m10.sdk.transaction.IndexedAccount.Issuance.deserializeBinaryFromReader);
      msg.setIssuance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFrozen(value);
      break;
    case 6:
      var value = new proto.m10.sdk.transaction.Instrument;
      reader.readMessage(value,proto.m10.sdk.transaction.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.IndexedAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.IndexedAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.IndexedAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIssuance();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.m10.sdk.transaction.IndexedAccount.Issuance.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFrozen();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.m10.sdk.transaction.Instrument.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.IndexedAccount.Issuance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.IndexedAccount.Issuance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuedBalance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonLeafChildren: jspb.Message.getFieldWithDefault(msg, 2, 0),
    leafChildren: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.IndexedAccount.Issuance}
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.IndexedAccount.Issuance;
  return proto.m10.sdk.transaction.IndexedAccount.Issuance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.IndexedAccount.Issuance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.IndexedAccount.Issuance}
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIssuedBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonLeafChildren(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLeafChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.IndexedAccount.Issuance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.IndexedAccount.Issuance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuedBalance();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNonLeafChildren();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLeafChildren();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 issued_balance = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.getIssuedBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount.Issuance} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.setIssuedBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 non_leaf_children = 2;
 * @return {number}
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.getNonLeafChildren = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount.Issuance} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.setNonLeafChildren = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 leaf_children = 3;
 * @return {number}
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.getLeafChildren = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount.Issuance} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.Issuance.prototype.setLeafChildren = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Issuance issuance = 3;
 * @return {?proto.m10.sdk.transaction.IndexedAccount.Issuance}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.getIssuance = function() {
  return /** @type{?proto.m10.sdk.transaction.IndexedAccount.Issuance} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.IndexedAccount.Issuance, 3));
};


/**
 * @param {?proto.m10.sdk.transaction.IndexedAccount.Issuance|undefined} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount} returns this
*/
proto.m10.sdk.transaction.IndexedAccount.prototype.setIssuance = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.IndexedAccount} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.clearIssuance = function() {
  return this.setIssuance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.hasIssuance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 balance = 4;
 * @return {number}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool frozen = 5;
 * @return {boolean}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.getFrozen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.setFrozen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional Instrument instrument = 6;
 * @return {?proto.m10.sdk.transaction.Instrument}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.getInstrument = function() {
  return /** @type{?proto.m10.sdk.transaction.Instrument} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.Instrument, 6));
};


/**
 * @param {?proto.m10.sdk.transaction.Instrument|undefined} value
 * @return {!proto.m10.sdk.transaction.IndexedAccount} returns this
*/
proto.m10.sdk.transaction.IndexedAccount.prototype.setInstrument = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.IndexedAccount} returns this
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.clearInstrument = function() {
  return this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.IndexedAccount.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.InvokeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.InvokeAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.InvokeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromAccount: msg.getFromAccount_asB64(),
    target: (f = msg.getTarget()) && proto.m10.sdk.transaction.Target.toObject(includeInstance, f),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.InvokeAction}
 */
proto.m10.sdk.transaction.InvokeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.InvokeAction;
  return proto.m10.sdk.transaction.InvokeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.InvokeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.InvokeAction}
 */
proto.m10.sdk.transaction.InvokeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromAccount(value);
      break;
    case 4:
      var value = new proto.m10.sdk.transaction.Target;
      reader.readMessage(value,proto.m10.sdk.transaction.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.InvokeAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.InvokeAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.InvokeAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.m10.sdk.transaction.Target.serializeBinaryToWriter
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.InvokeAction} returns this
 */
proto.m10.sdk.transaction.InvokeAction.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes from_account = 3;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getFromAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes from_account = 3;
 * This is a type-conversion wrapper around `getFromAccount()`
 * @return {string}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getFromAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromAccount()));
};


/**
 * optional bytes from_account = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromAccount()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getFromAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromAccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.InvokeAction} returns this
 */
proto.m10.sdk.transaction.InvokeAction.prototype.setFromAccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Target target = 4;
 * @return {?proto.m10.sdk.transaction.Target}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getTarget = function() {
  return /** @type{?proto.m10.sdk.transaction.Target} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.Target, 4));
};


/**
 * @param {?proto.m10.sdk.transaction.Target|undefined} value
 * @return {!proto.m10.sdk.transaction.InvokeAction} returns this
*/
proto.m10.sdk.transaction.InvokeAction.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.InvokeAction} returns this
 */
proto.m10.sdk.transaction.InvokeAction.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes payload = 5;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes payload = 5;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.InvokeAction.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.InvokeAction} returns this
 */
proto.m10.sdk.transaction.InvokeAction.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.m10.sdk.transaction.Target.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.m10.sdk.transaction.Target.TargetCase = {
  TARGET_NOT_SET: 0,
  ACCOUNT_ID: 1
};

/**
 * @return {proto.m10.sdk.transaction.Target.TargetCase}
 */
proto.m10.sdk.transaction.Target.prototype.getTargetCase = function() {
  return /** @type {proto.m10.sdk.transaction.Target.TargetCase} */(jspb.Message.computeOneofCase(this, proto.m10.sdk.transaction.Target.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.Target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: msg.getAccountId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.Target}
 */
proto.m10.sdk.transaction.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.Target;
  return proto.m10.sdk.transaction.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.Target}
 */
proto.m10.sdk.transaction.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.Target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.Target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes account_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.Target.prototype.getAccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account_id = 1;
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {string}
 */
proto.m10.sdk.transaction.Target.prototype.getAccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountId()));
};


/**
 * optional bytes account_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Target.prototype.getAccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.Target} returns this
 */
proto.m10.sdk.transaction.Target.prototype.setAccountId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.m10.sdk.transaction.Target.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.m10.sdk.transaction.Target} returns this
 */
proto.m10.sdk.transaction.Target.prototype.clearAccountId = function() {
  return jspb.Message.setOneofField(this, 1, proto.m10.sdk.transaction.Target.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.Target.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contextId: msg.getContextId_asB64(),
    fromAccount: msg.getFromAccount_asB64(),
    target: (f = msg.getTarget()) && proto.m10.sdk.transaction.Target.toObject(includeInstance, f),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.Action}
 */
proto.m10.sdk.transaction.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.Action;
  return proto.m10.sdk.transaction.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.Action}
 */
proto.m10.sdk.transaction.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContextId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromAccount(value);
      break;
    case 5:
      var value = new proto.m10.sdk.transaction.Target;
      reader.readMessage(value,proto.m10.sdk.transaction.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContextId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFromAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.m10.sdk.transaction.Target.serializeBinaryToWriter
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional uint64 tx_id = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.Action.prototype.getTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.Action} returns this
 */
proto.m10.sdk.transaction.Action.prototype.setTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.m10.sdk.transaction.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.Action} returns this
 */
proto.m10.sdk.transaction.Action.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes context_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.Action.prototype.getContextId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes context_id = 3;
 * This is a type-conversion wrapper around `getContextId()`
 * @return {string}
 */
proto.m10.sdk.transaction.Action.prototype.getContextId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContextId()));
};


/**
 * optional bytes context_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContextId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Action.prototype.getContextId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContextId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.Action} returns this
 */
proto.m10.sdk.transaction.Action.prototype.setContextId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes from_account = 4;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.Action.prototype.getFromAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes from_account = 4;
 * This is a type-conversion wrapper around `getFromAccount()`
 * @return {string}
 */
proto.m10.sdk.transaction.Action.prototype.getFromAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromAccount()));
};


/**
 * optional bytes from_account = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromAccount()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Action.prototype.getFromAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromAccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.Action} returns this
 */
proto.m10.sdk.transaction.Action.prototype.setFromAccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional Target target = 5;
 * @return {?proto.m10.sdk.transaction.Target}
 */
proto.m10.sdk.transaction.Action.prototype.getTarget = function() {
  return /** @type{?proto.m10.sdk.transaction.Target} */ (
    jspb.Message.getWrapperField(this, proto.m10.sdk.transaction.Target, 5));
};


/**
 * @param {?proto.m10.sdk.transaction.Target|undefined} value
 * @return {!proto.m10.sdk.transaction.Action} returns this
*/
proto.m10.sdk.transaction.Action.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m10.sdk.transaction.Action} returns this
 */
proto.m10.sdk.transaction.Action.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.Action.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes payload = 6;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.Action.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes payload = 6;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.m10.sdk.transaction.Action.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Action.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.Action} returns this
 */
proto.m10.sdk.transaction.Action.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m10.sdk.transaction.Actions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.Actions.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.Actions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.Actions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Actions.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.m10.sdk.transaction.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.Actions}
 */
proto.m10.sdk.transaction.Actions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.Actions;
  return proto.m10.sdk.transaction.Actions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.Actions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.Actions}
 */
proto.m10.sdk.transaction.Actions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.m10.sdk.transaction.Action;
      reader.readMessage(value,proto.m10.sdk.transaction.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.Actions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.Actions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.Actions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.Actions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.m10.sdk.transaction.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array<!proto.m10.sdk.transaction.Action>}
 */
proto.m10.sdk.transaction.Actions.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.m10.sdk.transaction.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.m10.sdk.transaction.Action, 1));
};


/**
 * @param {!Array<!proto.m10.sdk.transaction.Action>} value
 * @return {!proto.m10.sdk.transaction.Actions} returns this
*/
proto.m10.sdk.transaction.Actions.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m10.sdk.transaction.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m10.sdk.transaction.Action}
 */
proto.m10.sdk.transaction.Actions.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m10.sdk.transaction.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m10.sdk.transaction.Actions} returns this
 */
proto.m10.sdk.transaction.Actions.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.GetActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.GetActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.GetActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.GetActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.GetActionRequest}
 */
proto.m10.sdk.transaction.GetActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.GetActionRequest;
  return proto.m10.sdk.transaction.GetActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.GetActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.GetActionRequest}
 */
proto.m10.sdk.transaction.GetActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.GetActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.GetActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.GetActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.GetActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 tx_id = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.GetActionRequest.prototype.getTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.GetActionRequest} returns this
 */
proto.m10.sdk.transaction.GetActionRequest.prototype.setTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.m10.sdk.transaction.ListActionsRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.m10.sdk.transaction.ListActionsRequest.FilterCase = {
  FILTER_NOT_SET: 0,
  ACCOUNT_ID: 2,
  CONTEXT_ID: 3
};

/**
 * @return {proto.m10.sdk.transaction.ListActionsRequest.FilterCase}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getFilterCase = function() {
  return /** @type {proto.m10.sdk.transaction.ListActionsRequest.FilterCase} */(jspb.Message.computeOneofCase(this, proto.m10.sdk.transaction.ListActionsRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.ListActionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.ListActionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.ListActionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: msg.getAccountId_asB64(),
    contextId: msg.getContextId_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minTxId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxTxId: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.ListActionsRequest}
 */
proto.m10.sdk.transaction.ListActionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.ListActionsRequest;
  return proto.m10.sdk.transaction.ListActionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.ListActionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.ListActionsRequest}
 */
proto.m10.sdk.transaction.ListActionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContextId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinTxId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.ListActionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.ListActionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.ListActionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMinTxId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMaxTxId();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes account_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getAccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes account_id = 2;
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {string}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getAccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountId()));
};


/**
 * optional bytes account_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getAccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.m10.sdk.transaction.ListActionsRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.clearAccountId = function() {
  return jspb.Message.setOneofField(this, 2, proto.m10.sdk.transaction.ListActionsRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes context_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getContextId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes context_id = 3;
 * This is a type-conversion wrapper around `getContextId()`
 * @return {string}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getContextId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContextId()));
};


/**
 * optional bytes context_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContextId()`
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getContextId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContextId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.setContextId = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.m10.sdk.transaction.ListActionsRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.clearContextId = function() {
  return jspb.Message.setOneofField(this, 3, proto.m10.sdk.transaction.ListActionsRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.hasContextId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 limit = 4;
 * @return {number}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 min_tx_id = 5;
 * @return {number}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getMinTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.setMinTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 max_tx_id = 6;
 * @return {number}
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.getMaxTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.ListActionsRequest} returns this
 */
proto.m10.sdk.transaction.ListActionsRequest.prototype.setMaxTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m10.sdk.transaction.CommitTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.m10.sdk.transaction.CommitTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m10.sdk.transaction.CommitTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CommitTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    pendingTxId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newState: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m10.sdk.transaction.CommitTransfer}
 */
proto.m10.sdk.transaction.CommitTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m10.sdk.transaction.CommitTransfer;
  return proto.m10.sdk.transaction.CommitTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m10.sdk.transaction.CommitTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m10.sdk.transaction.CommitTransfer}
 */
proto.m10.sdk.transaction.CommitTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPendingTxId(value);
      break;
    case 2:
      var value = /** @type {!proto.m10.sdk.transaction.CommitTransfer.TransferState} */ (reader.readEnum());
      msg.setNewState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m10.sdk.transaction.CommitTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m10.sdk.transaction.CommitTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m10.sdk.transaction.CommitTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m10.sdk.transaction.CommitTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPendingTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNewState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.m10.sdk.transaction.CommitTransfer.TransferState = {
  ACCEPTED: 0,
  REJECTED: 1
};

/**
 * optional uint64 pending_tx_id = 1;
 * @return {number}
 */
proto.m10.sdk.transaction.CommitTransfer.prototype.getPendingTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m10.sdk.transaction.CommitTransfer} returns this
 */
proto.m10.sdk.transaction.CommitTransfer.prototype.setPendingTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TransferState new_state = 2;
 * @return {!proto.m10.sdk.transaction.CommitTransfer.TransferState}
 */
proto.m10.sdk.transaction.CommitTransfer.prototype.getNewState = function() {
  return /** @type {!proto.m10.sdk.transaction.CommitTransfer.TransferState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.m10.sdk.transaction.CommitTransfer.TransferState} value
 * @return {!proto.m10.sdk.transaction.CommitTransfer} returns this
 */
proto.m10.sdk.transaction.CommitTransfer.prototype.setNewState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


goog.object.extend(exports, proto.m10.sdk.transaction);
